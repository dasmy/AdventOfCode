input = '''#.########################################################################################################################
#<>>><>>^vv<>>.^..><^.^v<<^.<.v<>>^<>><v>v^><<.<>v<<<v<.><><>v>^>v>vv<v.<<>>^vv<v<v<v<^v><v<v<^<v<v^v>v<^v<>^>^.v^^^v<v>>#
#>v>^^><>v^^.>><<v>^v<>v^^^v><.^v^<^<>>^v>^>>>>^<<><>><.<>..v<>^>vv<<^<^v>v>^.^vv><<>>>>^<^>>>v><^<vv.<.^^v>^>^>v^.v<^<<>#
#>^<v<<<<v>^v<><v^>.>v^<<^>>v^>^>>v^^>v^^><v<vvv><^.<vv.>v^<vv><>vv^^.>^v^^.v^^><vv>^^>..>^<>v>v><<^^>^^^><v^<<<<<><<<v<>#
#>vv..<^.^>v>v^.v^>.^^vv.<><v^<><^>^>.<v>v<>.><v>^<v<vv>>vv>^<<v<<<>.v<.<><><.^><<<v^.vv<<^<<>>^>>^v>^<^>v.^<^^><^>vvvv><#
#>^<v>v<..>>v^v..v^^v>v<v^^<><^vv^^v..>v<v>^^^<v>.>>.^>>>^^><v^.v>v.v<.>^^^^vv^vv^^^<>v><<^.<>>><^^vv<v>><vvvv.^<vv^<><v>#
#<v<>v>.v<^>.v>^>^>.>^<^>>>>>><>><<vv<^>.vvv<^^v>.>v^>^v.v^<^>><<>^>v><.>v^.<^^>^>v^<<^v.v^.v>><^<^<>>>v>v^.^>>>>^<<^>v><#
#>v^>>v^v<>.vv..vvv^<^^vvv<.<^.^>^.><.^v^^><v.<v<><<<<v<v^v<<^<v<.<^v^>><vv^<v<<>^.<v<v><v<^^v<.><<<^v>v.^>.<><<^.v^.<.^<#
#<>.^>><<^vv.^^vvv><^><<v^<<^.v^>><>>^>v<>^^vv<^><<^.^>^<<^v^<>^<^^>>^^>vv^>>^v>^v<<v^v>v^.^>>.^>^<^<>^.^v<^>.^^^v><><v><#
#<vvv<><^>v<^vvv<>v>.<v^<<<v>>vv<v^v.v<^<^>v.>>^.^v^<.v<<^.<<vv.<>>vv>>v.<<<<.^<>>^.<><>^v><><>vv<<>.<^v<<<.v^v>.<.<^v<^>#
#<^^.>^^vv^>^^v.v^vv>>vvv<v<v>^>><v<vv<vv>^v>^v^<>^v.^.^<<<<<>>^^.<>>>^..<v>>.<^^vvv>^<^^><^v<<v>^^v.v>^v><>>^<<>>>^.v^.>#
#<^^vv<>^v<<^v.>^^><.<<>>>^>>.v.<>.<.v.<<^v<^<>>^>v<<.>.v..v^vv>^^v>>v>vvv>^<v>.>^v>>v<v>vvv^^^^v^><v^>v^v>^v.>^^^v^v><v<#
#>^v^>v>>>>^>^<<^^v^v>v<v>vv><>^vv<..<^>>..>>v<.^.^v<v<><>.vv<^<..>v>^<vv><>^<^<>^<v>.^.^>>^vvvv^.^<.^v^^<v>>v^>v>>.>^>v<#
#>.<><vv.^v^v<^>vvv^v>><^.<<^..>^v<>><^.v..>v^>>>.<v.<^^v^^>^^<<<>v>>>v..>v>.<.vv^<><<>v>v<><.v>>^.^vvv><^^.>v.^^vv.^>vv<#
#>.v^^v.^<<>v<<^^.<v.<<>^><v.<>^^.<<^<><^^<^^<v.><^>>vv^v<<v^^.^v.vv><>v<><^^v^<<^>.>^<<v.v^>^.>^^><.>.>><>v><^^>..^.v><>#
#.>>v^^v.vv>vv>>>v>>^<<v>.<v>><>>^<<>^vv<^<<<v^>.^vv^^.<v>>v^>>>^^v>^>^v^v<<^^<^^>>^<<^>^>>^<^<>>.v>>v<><<><^>vv>^>.v^<v>#
#<v><v^<vv>>vv<>^<><<^^.v<v<>>^<^v>>v><>^.^<<.<<<>v<>v>><v<^^^>v>v<><^vv^vv<<^^v^>>v^<>v<<.^^v^v<>^<>><^.^v>>.^<vvv.>v.v<#
#>v.>>v^vv^<^><..^>><^^><^<><v^><^^<v>^^<vv^>^<v^<>^v^<<^^vv.^.><..><>>v.vv.>>^<^^>v.<^<^><.^v^>v<v><<<<v^<^vv>^<vv>><>v<#
#<v>v><v^v<<^v>v.<vvv<<<^^^^.^v^>><^><<<^>v^.vv^>v>vvv^v^v<<^^<<^.^<v>v>.vv^>v<v^><v^<.<v<<^v<<v<<^>^<.>>^.v^^vvv.^^<<v<>#
#>v<v<^v>v^^>^>>^<^.v>>><<^^>^<>v><<^<^v^vv<vv>^^<v<<v^<vv>><>.^vv<^vv..<<^v>>^v<v.<.>^^^^v^v<.v.<><>vv>^v<^>v^>.>v>v.^><#
#.><<v>^v^v^^v>v>v^><v<vv^<>>>><^v.<v^<>>>^v>v.^<>v>v^^v<^v>>>>^v><>><<.<>.>vv<<^vv^vv^<.^^>^.^.v^^.^^>^>^^><<<v<>>>^..v<#
#<vv<<.<>vv^>^.<^vv^><^v^vv.<.>^v>v^^^><^<^>v<>^>v^<>v^<v^>vv.>^^vv^>><^^><vv<^vv>^>v>^v.^<><^<><^><v<>^.<v^^>^><<><>v^<<#
#>>.<^v<^<.<vv<<^vv^.^v<>.v^>^>><v>>v.<<^^.v^^v.<vv^^<vvv^>^<vv<v.>.^v^>.v><>v>.^..^<vv.v><v^<>^>^>v^^<.>v<^v<>.^^^^<^.>.#
#>><^.v<^^<<v.<><>>^v<^<^^^>^<.^<..^^>^^<.^>vv^vv^^.v.^v.^v^.>v<<>^<>^v<>^^<><.>^<^<>v.^>^>^.<vv^>>^<..v>>vvvvv>>vv<<.<>.#
#<v^^^<^^^<^<<>^^<><^^^<<>v><v^<<v<^^><.>v>v^..^>^v<>v><^v.^^<^vv>v^><<>^>^^v^<^.<^vv><^><..v>^.<vv<>>>.^^<v>>v<<^<><^<<>#
#<.><><^v>>>v^^<^<^^^^>>v^<<v>.>.^vvvv<<v<.>v^v>v^>>v^^^<><<>^.^>^^<v<<v<<<.v>v.^^^<<^^v<v<>><v^^v<^vv^v<^vv>><v^<<<v^v<.#
########################################################################################################################.#'''

from itertools import count


def next_pos(pos):
    r, c = pos
    yield r, c
    yield r - 1, c
    yield r + 1, c
    yield r, c - 1
    yield r, c + 1


def traverse(start, stop, time):
    positions = set([start])

    for time in count(time):
        next_positions = set()
        for pos in positions:
            for x, y in next_pos(pos):
                if (x, y) == stop:
                    return time

                if not (0 <= x < rows and 0 <= y < cols):
                    continue

                if map[x][(y - time) % cols] == ">":
                    continue

                if map[x][(y + time) % cols] == "<":
                    continue

                if map[(x - time) % rows][y] == "v":
                    continue

                if map[(x + time) % rows][y] == "^":
                    continue

                next_positions.add((x, y))

        if next_positions:
            positions = next_positions


map = [row[1:-1] for row in input.split('\n')[1:-1]]
rows, cols = len(map), len(map[0])
start = (-1, 0)
stop = (rows, cols - 1)

print(t1 := traverse(start, stop, 0))
print(t2 := traverse(stop, start, t1))
print(t3 := traverse(start, stop, t2))
