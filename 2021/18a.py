import ast


def tokenize(n):
    result = []
    tmp = ''
    for pos in range(len(n)):
        c = n[pos]
        if c == ' ':
            continue
        elif c in ('[', ']', ','):
            if len(tmp) > 0:
                result.append(int(tmp))
                tmp = ''
            result.append(c)
        else:
            tmp += c

    return result


def reduce(number):
    number = tokenize(number)
    did_something = True

    while did_something:
        did_something = False

        if not did_something:
            level = 0
            for pos, c in enumerate(number):
                if c == '[':
                    level += 1
                elif c == ']':
                    level -= 1

                if level >= 5:
                    # explode
                    n1 = number[pos + 1]
                    nc = number[pos + 2]
                    n2 = number[pos + 3]
                    if not (isinstance(n1, int) and nc == ',' and isinstance(n2, int)):
                        assert False

                    # distribute left
                    p = pos - 1
                    while p > 0:
                        if isinstance(number[p], int):
                            number[p] += n1
                            break
                        p -= 1

                    # distribute right
                    p = pos + 4
                    while p < len(number):
                        if isinstance(number[p], int):
                            number[p] += n2
                            break
                        p += 1

                    # replace pair with 0
                    number[pos] = 0
                    del number[pos+1:pos+5]

                    did_something = True
                    break

        if not did_something:
            for pos, c in enumerate(number):
                if isinstance(c, int) and c >= 10:
                    del number[pos]
                    for i, t in enumerate(['[', c // 2, ',', (c+1) // 2, ']']):
                        number.insert(pos + i, t)
                    did_something = True
                    break

    return ''.join([str(t) for t in number])


assert reduce('[[[[[9,8],1],2],3],4]') == '[[[[0,9],2],3],4]'
assert reduce('[7,[6,[5,[4,[3,2]]]]]') == '[7,[6,[5,[7,0]]]]'
assert reduce('[[6,[5,[4,[3,2]]]],1]') == '[[6,[5,[7,0]]],3]'
assert reduce('[[3,[2,[1,[7,3]]]],[6,[5,[4,[3,2]]]]]') == '[[3,[2,[8,0]]],[9,[5,[7,0]]]]'


def add(a, b):
    return reduce(f'[{a},{b}]')


assert add('[[[[4,3],4],4],[7,[[8,4],9]]]', '[1,1]') == '[[[[0,7],4],[[7,8],[6,0]]],[8,1]]'


def list_add(*args):
    sum = args[0]
    for n in args[1:]:
        sum = add(sum, n)
    return sum


assert list_add('[1,1]', '[2,2]', '[3,3]', '[4,4]') == '[[[[1,1],[2,2]],[3,3]],[4,4]]'
assert list_add('[1,1]', '[2,2]', '[3,3]', '[4,4]', '[5,5]') == '[[[[3,0],[5,3]],[4,4]],[5,5]]'
assert list_add('[1,1]', '[2,2]', '[3,3]', '[4,4]', '[5,5]', '[6,6]') == '[[[[5,0],[7,4]],[5,5]],[6,6]]'
assert list_add('[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]', '[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]', '[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]', '[[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]', '[7,[5,[[3,8],[1,4]]]]', '[[2,[2,2]],[8,[8,1]]]', '[2,9]', '[1,[[[9,3],9],[[9,0],[0,7]]]]', '[[[5,[7,4]],7],1]', '[[[[4,2],2],6],[8,7]]') == '[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]'


def magnitude(number):

    def mag(n):
        if isinstance(n, list):
            return 3*mag(n[0]) + 2*mag(n[-1])
        else:
            return n

    return mag(ast.literal_eval(number))


assert magnitude('[9, 1]') == 29
assert magnitude('[1, 9]') == 21
assert magnitude('[[9, 1], [1, 9]]') == 129
assert magnitude('[[1,2],[[3,4],5]]') == 143
assert magnitude('[[[[0,7],4],[[7,8],[6,0]]],[8,1]]') == 1384
assert magnitude('[[[[1,1],[2,2]],[3,3]],[4,4]]') == 445
assert magnitude('[[[[3,0],[5,3]],[4,4]],[5,5]]') == 791
assert magnitude('[[[[5,0],[7,4]],[5,5]],[6,6]]') == 1137
assert magnitude('[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]') == 3488


def homework(*args):
    sum = list_add(*args)
    print(sum, magnitude(sum))


homework(
    '[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]',
    '[[[5,[2,8]],4],[5,[[9,9],0]]]',
    '[6,[[[6,2],[5,6]],[[7,6],[4,7]]]]',
    '[[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]',
    '[[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]',
    '[[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]',
    '[[[[5,4],[7,7]],8],[[8,3],8]]',
    '[[9,3],[[9,9],[6,[4,9]]]]',
    '[[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]',
    '[[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]',
)

homework(
    '[3,[5,[7,[3,9]]]]',
    '[[[[7,0],0],[2,[2,8]]],[[[7,8],1],3]]',
    '[[[[2,7],0],7],4]',
    '[[2,1],[9,0]]',
    '[[[[7,1],[3,2]],[[9,8],5]],[2,7]]',
    '[[[8,9],[[8,7],0]],[[[8,7],[6,3]],[[1,7],[8,9]]]]',
    '[[8,6],[[9,[1,7]],[6,[3,9]]]]',
    '[[2,[[5,6],6]],[[4,[5,9]],[3,[4,5]]]]',
    '[[[[2,0],[1,1]],[6,6]],[[1,9],[[2,7],[6,8]]]]',
    '[[[4,6],[[6,3],[3,9]]],[[[2,6],[6,1]],[[9,9],[1,5]]]]',
    '[[[4,[3,1]],3],6]',
    '[[0,[[5,2],8]],[1,[9,[4,3]]]]',
    '[[[[8,6],[2,1]],[2,[8,6]]],[[[7,1],[3,9]],0]]',
    '[[[[4,7],[2,7]],[[8,9],2]],[[[2,4],[7,2]],[3,7]]]',
    '[[5,[2,2]],[[1,6],[[9,1],[5,0]]]]',
    '[[5,[[1,2],[6,4]]],[6,8]]',
    '[[[5,[1,7]],7],[7,[8,1]]]',
    '[[1,9],[[0,3],[[6,7],[2,4]]]]',
    '[1,[7,[[0,6],0]]]',
    '[[[[5,7],9],[[3,2],7]],[[5,1],[9,9]]]',
    '[[[[0,4],[9,6]],[[8,3],[7,4]]],[7,[6,2]]]',
    '[[[[1,6],0],[[8,0],[3,4]]],[[3,[0,3]],4]]',
    '[4,[[7,8],[4,[9,7]]]]',
    '[[[2,[3,7]],5],[0,[9,9]]]',
    '[[[2,0],[[5,8],[7,6]]],[[9,[6,2]],[3,2]]]',
    '[[[3,1],3],[[[3,7],6],[9,8]]]',
    '[[7,[[2,5],5]],[5,[3,[4,5]]]]',
    '[[[6,7],6],[2,[[9,3],9]]]',
    '[[[[5,6],7],[[3,2],5]],[[9,[4,3]],[3,8]]]',
    '[0,7]',
    '[[[4,6],[2,9]],[[[7,6],[5,1]],7]]',
    '[[0,5],[[1,[4,1]],[[7,3],9]]]',
    '[[[2,[3,8]],5],[[[5,9],8],[7,0]]]',
    '[[[6,[8,6]],[[3,6],7]],[[2,1],[6,[7,5]]]]',
    '[[2,[[6,3],[8,9]]],[[[5,6],4],[[7,0],1]]]',
    '[[[[7,1],[5,6]],8],[[[8,9],4],[8,3]]]',
    '[[[9,2],[1,0]],0]',
    '[[5,[5,[8,5]]],4]',
    '[[3,[5,[4,9]]],3]',
    '[[8,[[7,7],6]],5]',
    '[[4,[[5,1],1]],[1,[1,[9,8]]]]',
    '[[[7,[3,6]],[[2,8],[4,7]]],[[[8,8],[4,0]],[2,4]]]',
    '[[[[3,6],3],[0,9]],2]',
    '[[2,8],[[8,[8,6]],[[1,1],[4,5]]]]',
    '[[2,[1,[1,0]]],[[[6,2],[7,4]],[[7,1],6]]]',
    '[3,[8,[7,[8,6]]]]',
    '[[1,0],[[[0,4],[0,5]],[1,5]]]',
    '[[[[5,0],4],[[7,8],[8,8]]],[[1,7],0]]',
    '[1,[[[4,1],7],[6,[9,0]]]]',
    '[[[1,8],2],[[5,5],[8,5]]]',
    '[[4,[9,[0,6]]],[[[8,9],[4,5]],4]]',
    '[[[[5,4],[1,7]],[[3,1],[7,9]]],[[[0,8],[4,7]],[[5,9],6]]]',
    '[[[[8,0],9],4],[[7,[1,3]],5]]',
    '[[[[5,0],6],[[6,1],8]],[[9,1],7]]',
    '[[9,[6,[8,8]]],[7,[[7,1],6]]]',
    '[[[5,[1,5]],[3,[4,2]]],[[[5,2],7],[[6,9],[2,8]]]]',
    '[[[5,[5,5]],[5,7]],[4,[[2,9],7]]]',
    '[[[[0,4],0],[[0,6],[3,0]]],[0,[[8,1],2]]]',
    '[[[7,[4,6]],[[7,2],[4,6]]],[[[9,3],[4,9]],6]]',
    '[[6,7],7]',
    '[[[4,1],[8,[1,5]]],[[4,6],0]]',
    '[[[4,[5,5]],5],[[0,[2,7]],[1,1]]]',
    '[[[[0,1],3],[6,7]],[4,7]]',
    '[[4,[6,4]],[[[9,8],1],[9,3]]]',
    '[[[4,9],0],[[[7,0],[0,9]],[1,[1,0]]]]',
    '[[[7,9],[[9,5],[6,9]]],[[0,[3,0]],[0,[5,9]]]]',
    '[9,[[0,0],[[1,9],9]]]',
    '[[[5,[0,5]],[[9,8],[9,5]]],[[0,[2,5]],7]]',
    '[[[[5,8],6],9],[[[2,7],7],[[7,8],5]]]',
    '[[8,[[4,7],6]],2]',
    '[[[[7,1],[9,0]],[9,[1,7]]],[[8,[6,7]],[2,5]]]',
    '[[4,[2,9]],8]',
    '[[[[7,6],[5,3]],[5,[9,7]]],[[6,[8,1]],[[6,4],9]]]',
    '[[7,[[7,8],4]],[[1,3],[4,[9,7]]]]',
    '[[[6,[6,7]],[[2,8],3]],[7,[6,[0,3]]]]',
    '[[9,8],[[0,[4,8]],[[9,1],1]]]',
    '[[[[4,0],[5,9]],7],[6,[[5,9],[9,6]]]]',
    '[[8,1],[1,[9,[8,3]]]]',
    '[[[1,[5,1]],[6,7]],[[5,9],[2,[6,7]]]]',
    '[[[3,7],[[7,8],1]],[[0,[6,3]],[8,0]]]',
    '[[5,[[9,3],[1,2]]],7]',
    '[[[1,[9,9]],3],[[6,4],[4,1]]]',
    '[[6,[1,[3,6]]],[2,9]]',
    '[[2,[0,2]],[5,[[9,4],[5,0]]]]',
    '[[4,[[3,1],[7,0]]],[[9,1],[[5,5],[6,7]]]]',
    '[[3,[[7,1],[3,4]]],[7,[9,[9,4]]]]',
    '[[9,9],[[5,4],[[9,7],4]]]',
    '[[[5,1],8],[[6,7],9]]',
    '[[[0,[9,5]],[4,3]],[3,2]]',
    '[[[6,[4,1]],[[8,7],[5,3]]],[[[1,2],5],[[9,2],5]]]',
    '[[[[7,4],[9,0]],[[1,8],[2,9]]],[[5,[1,9]],[4,0]]]',
    '[[[4,[3,8]],[[3,3],[2,8]]],[[[1,3],9],[[8,5],6]]]',
    '[[[[6,4],[7,9]],[[7,6],8]],[7,[9,8]]]',
    '[[7,[3,5]],7]',
    '[[[[5,0],[2,3]],[3,7]],[[4,[6,3]],[7,[4,4]]]]',
    '[[6,[3,[7,6]]],[[[5,8],[8,1]],[3,[1,5]]]]',
    '[[8,[9,[5,2]]],2]',
    '[[1,[5,4]],[[7,[8,0]],8]]',
    '[[[[2,7],4],3],[[1,4],[8,4]]]',
    '[3,[9,2]]',
)
